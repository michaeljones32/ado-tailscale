# Copyright (c) Tailscale Inc & AUTHORS
# SPDX-License-Identifier: BSD-3-Clause
#
parameters:
  - name: oauth_client_id
    displayName: 'Your Tailscale OAuth Client ID.'
  - name: oauth_secret
    displayName: 'Your Tailscale OAuth Client Secret.'
  - name: tags
    displayName: 'Comma separated list of Tags to be applied to nodes. The OAuth client must have permission to apply these tags.'
    default: ""
  - name: version
    displayName: 'Tailscale version to use.'
  - name: sha256sum
    displayName: 'Expected SHA256 checksum of the tarball.'
    default: ''
  - name: args
    displayName: 'Optional additional arguments to `tailscale up`'
    default: ''
  - name: tailscaled_args
    displayName: 'Optional additional arguments to `tailscaled`'
    default: ''
  - name: hostname
    displayName: 'Fixed hostname to use.'
    default: ''

steps:
  - task: Bash@3
    displayName: Check Runner OS
    condition: ne(variables['Agent.OS'], 'Linux')
    inputs:
      script: |
        echo "::error title=⛔ error hint::Support Linux Only"
        exit 1
  - task: Bash@3
    displayName: Check Auth Info Empty
    condition: ${{ or(eq(parameters.oauth_secret, ''), eq(parameters.tags, '') ) }}
    inputs:
      script: |
        echo "::error title=⛔ error hint::OAuth identity empty, Maybe you need to populate it in the Secrets for your workflow, see more in https://docs.github.com/en/actions/security-guides/encrypted-secrets and https://tailscale.com/s/oauth-clients"
        exit 1
  - task: Bash@3
    displayName: Download Tailscale
    env:
      VERSION: ${{ parameters.version }}
      SHA256SUM: ${{ parameters.sha256sum }}
    inputs:
      script: |
        if [ $(Agent.OSArchitecture) = "ARM64" ]; then
          TS_ARCH="arm64"
        elif [ $(Agent.OSArchitecture) = "ARM" ]; then
          TS_ARCH="arm"
        elif [ $(Agent.OSArchitecture) = "X86" ]; then
          TS_ARCH="386"
        elif [ $(Agent.OSArchitecture) = "X64" ]; then
          TS_ARCH="amd64"
        else
          TS_ARCH="amd64"
        fi
        MINOR=$(echo "$VERSION" | awk -F '.' {'print $2'})
        if [ $((MINOR % 2)) -eq 0 ]; then
          URL="https://pkgs.tailscale.com/stable/tailscale_${VERSION}_${TS_ARCH}.tgz"
        else
          URL="https://pkgs.tailscale.com/unstable/tailscale_${VERSION}_${TS_ARCH}.tgz"
        fi
        if ! [[ "$SHA256SUM" ]] ; then
          SHA256SUM="$(curl -H user-agent:tailscale-github-action -L "${URL}.sha256")"
        fi
        curl -H user-agent:tailscale-github-action -L "$URL" -o tailscale.tgz --max-time 300
        echo "Expected sha256: $SHA256SUM"
        echo "Actual sha256: $(sha256sum tailscale.tgz)"
        echo "$SHA256SUM  tailscale.tgz" | sha256sum -c
        tar -C /tmp -xzf tailscale.tgz
        rm tailscale.tgz
        TSPATH=/tmp/tailscale_${VERSION}_${TS_ARCH}
        sudo mv "${TSPATH}/tailscale" "${TSPATH}/tailscaled" /usr/bin
  - task: Bash@3
    displayName: Start Tailscale Daemon
    env:
      ADDITIONAL_DAEMON_ARGS: ${{ parameters.tailscaled_args }}
    inputs:
      script: |
        sudo -E tailscaled --state=mem: ${ADDITIONAL_DAEMON_ARGS} 2>~/tailscaled.log &
        # And check that tailscaled came up. The CLI will block for a bit waiting
        # for it. And --json will make it exit with status 0 even if we're logged
        # out (as we will be). Without --json it returns an error if we're not up.
        sudo -E tailscale status --json >/dev/null
  - task: Bash@3
    displayName: Connect to Tailscale
    env:
      ADDITIONAL_ARGS: ${{ parameters.args }}
      HOSTNAME: ${{ parameters.hostname }}
    inputs:
      script: |
        if [ -z "${HOSTNAME}" ]; then
          HOSTNAME="github-$(cat /etc/hostname)"
        fi

        TAILSCALE_AUTHKEY="${{ parameters.oauth_secret }}?preauthorized=true&ephemeral=true"
        TAGS_ARG="--advertise-tags=${{ parameters.tags }}"

        timeout 5m sudo -E tailscale up ${TAGS_ARG} --authkey=${TAILSCALE_AUTHKEY} --hostname=${HOSTNAME} --accept-routes ${ADDITIONAL_ARGS}